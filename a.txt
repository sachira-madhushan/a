version and current date =  SELECT VERSION(), CURRENT_DATE;

//2019
(a)
 (i) Create a database named hotel_db 
CREATE DATABASE hotel_db;
(ii) Create the tables with appropriate primary key and foreign key with the suitable data types. 
CREATE table hotel (HotelNo varchar(10), HotelName varchar(20),city varchar(20), primary key(HotelNo));

CREATE table room (RoomNo numeric (5), HotelNo varchar (10), Type varchar(10), Price decimal (5,2), primary key(RoomNo, HotelNo), foreign key(HotelNo) REFERENCES hotel (HotelNo));

CREATE table guest (GuestNo numeric (5), GuestName varchar (20), GuestAddress varchar (50),primary key (GuestNo));

CREATE table booking (HotelNo varchar(10), GuestNo numeric(5), datefrom date,dateto date, RoomNo numeric(5),primary key(HotelNo,GuestNo,datefrom),foreign key(RoomNo, HotelNo) REFERENCES room(RoomNo, HotelNo),
foreign key(GuestNo) REFERENCES guest(GuestNo));

(b) 
(i). List the data definition of the tables you have created above.
DESCRIBE booking;
 (ii). List full details of all hotels. 
SELECT *FROM hotel;
(iii). List full details of all hotels in London. 
SELECT *FROM hotel WHERE city LIKE '%London%';
(iv). List the names and addresses of all guests in London, alphabetically ordered by name. 
SELECT GuestName GuestAddress
FROM guest
WHERE GuestAddress LIKE '%London%'
ORDER BY GuestName;
(v). List all double or family rooms with a price below £40.00 per night, in ascending order of    price. 
SELECT *FROM room
WHERE Price < 40 AND Type IN ('Double','Family')
ORDER BY Price;
(vi). List the bookings for which no dateto has been specified. 
SELECT*FROM booking WHERE dateto IS NULL;

(c) (i). How many Hotels are there? 
SELECT COUNT(*) FROM hotel; 
(ii). What is the average price of a room? 
SELECT AVG(price) FROM room; 
(iii). What is the total revenue per night from all double rooms? 
SELECT SUM(price) FROM room WHERE type = 'Double'; 
(iv). How many different guests have made bookings for August? 
SELECT COUNT(DISTINCT guestno) FROM booking WHERE (datefrom >= '2004-08-01' AND datefrom 
<= '2004-08-31'); 
(v). How many different guests have made bookings for May? 
SELECT COUNT(DISTINCT guestno) FROM booking WHERE (datefrom >= '2004-05-01' AND datefrom 
<= '2004-05-31'); 
(d) (i). List the price and type of all rooms at the Grosvenor Hotel. 
SELECT price, type FROM room 
WHERE hotelno = (SELECT hotelno FROM hotel 
WHERE hotelname = 'Grosvenor'); 
(ii). List all guests currently staying at the Grosvenor Hotel. 
SELECT * FROM guest WHERE guestno = 
(SELECT guestno FROM booking 
WHERE datefrom <= CURRENT_DATE AND dateto >= CURRENT_DATE AND 
hotelno = (SELECT hotelno FROM hotel 
WHERE hotelname = 'Grosvenor')); 

(iii). List the details of all rooms at the Grosvenor Hotel, including the name of the guest staying in 
the room, if the room is occupied. 
SELECT r.* FROM room r LEFT JOIN (SELECT g.guestname, h.hotelno, b.roomno FROM Guest g, 
Booking b, Hotel h 
WHERE g.guestno = b.guestno AND b.hotelno = h.hotelno AND 
h.hotelname= 'Grosvenor' AND 
b.datefrom <= CURRENT_DATE AND b.dateto >= CURRENT_DATE) AS XXX 
ON r.hotelno = XXX.hotelno AND r.roomno = XXX.roomno; 
(iv). What is the total income from bookings for the Grosvenor Hotel today? SELECT SUM(price) 
FROM booking b, room r, hotel h WHERE (b.datefrom <= CURRENT_DATE AND 
b.dateto >= CURRENT_DATE) AND 
r.hotelno = h.hotelno AND r.roomno = b.roomno; 
(v). What is the lost income from unoccupied rooms at the Grosvenor Hotel? 
SELECT SUM(price) FROM room r WHERE roomno NOT IN 
(SELECT roomno FROM booking b, hotel h 
WHERE (datefrom <= CURRENT_DATE AND 
dateto >= CURRENT_DATE) AND 
b.hotelno = h.hotelno AND hotelname = 'Grosvenor');



//2017
Q2
i. Create a database called orderproc_db for an Order processing company using MySQL. 
CREATE DATABASE orderproc_db;

ii. Replace the data types in the tables given below with MySQL Compatible format.
CUSTOMER (custno: INT, cname: VARCHAR(15), city: VARCHAR(15)) 
ORDE (orderno: INT, odate: DATE, custno: INT, ord_amt: INT) 
ITEM (itemno:INT, unit_price: INT) 
ORDE_ITEM (orderno: INT, itemno: INT, qty: INT) 
WAREHOUSE (warehouseno:INT, city: VARCHAR(15)) 
SHIPMENT (orderno: INT, warehouseno: INT, ship_date: DATE)
  
iii. Using the orderproc_db database, create the following tables.  
CUSTOMER (custno: INT, cname: STRING, city: STRING)
	CUSTOMER (custno: INT, cname: VARCHAR(15), city: VARCHAR(15)) 
CREATE TABLE CUSTOMER(custno INT, cname VARCHAR(15), city VARCHAR(15));
 
ORDE (orderno: INT, odate: DATE, custno: INT, ord_amt: INT) 
	ORDE (orderno: INT, odate: DATE, custno: INT, ord_amt: INT) 
CREATE TABLE ORDE (orderno INT, odate DATE, custno INT, ord_amt INT);

ITEM (itemno: INT, unit_price: INT)
	ITEM (itemno: INT, unit_price: INT)
CREATE TABLE ITEM (itemno INT, unit_price INT);	

ORDE_ITEM (orderno: INT, itemno: INT, qty: INT) 
	ORDE_ITEM (orderno: INT, itemno: INT, qty: INT)
CREATE TABLE ORDE_ITEM (orderno INT, itemno INT, qty INT);

WAREHOUSE (warehouseno: INT, city: STRING) 
	WAREHOUSE (warehouseno: INT, city: VARCHAR(15))
CREATE TABLE WAREHOUSE (warehouseno INT, city VARCHAR(15));

SHIPMENT (orderno: INT, warehouseno: INT, ship_date: DATE)
	SHIPMENT (orderno: INT, warehouseno: INT, ship_date: DATE)
CREATE TABLE SHIPMENT (orderno INT, warehouseno INT, ship_date DATE);
 
iv. Identify the primary key and define primary key constrains for the table.
ALTER TABLE CUSTOMER ADD PRIMARY KEY(custno);
ALTER TABLE SHIPMENT ADD PRIMARY KEY(orderno,warehouseno);

v. Identify the foreign keys and enforce referential integrity for the tables.
ALTER TABLE ORDE_ITEM ADD FOREIGN KEY(itemno) REFERENCES ITEM(itemno);
ALTER TABLE SHIPMENT ADD FOREIGN KEY(warehouseno) REFERENCES WAREHOUSE(warehouseno),ADD FOREIGN KEY(orderno) REFERENCES ORDE(orderno);

vi. Describe the structures of the tables you have created above. 
DESCRIBE CUSTOMER; 

vii. Insert the records to the tables. Records are available as text files with the respective table names in a folder called “Tables” on your desktop. You need to properly format these records before inserting into the tables. 
LOAD DATA LOCAL INFILE "G:/ass/ass6/table file/customers.txt" INTO TABLE CUSTOMER;

viii. List all customers from Batticaloa. 
SELECT *FROM CUSTOMER WHERE city="Batticaloa";

ix. Propose an alternative method to execute the above question (viii).
SELECT *FROM customer WHERE city IN ('Batticaloa');

x. Select all customers who are from Batticaloa or Jaffna. 
SELECT *FROM CUSTOMER WHERE city="Batticaloa" OR city="Jaffna";
xi. How many customers are there in Colombo? 
SELECT COUNT(*) FROM CUSTOMER WHERE city='Colombo';

xii. List the customer’s name ending with the letters “na”.
SELECT *FROM  CUSTOMER WHERE cname LIKE '%na';

xiii. List all the order amount above 50000.
SELECT *FROM ORDE WHERE ord_amt > 50000;
xiv. List all customers name who made order above 50000. 
SELECT CUSTOMER.cname,ORDE.ord_amt 
		FROM CUSTOMER INNER JOIN ORDE ON ORDE.custno = CUSTOMER.custno 
		WHERE ord_amt>50000;
		
xv. List all customers name who have at least one warehouse in their city.
SELECT DISTINCT cname FROM CUSTOMER INNER JOIN WAREHOUSE on WAREHOUSE.city = CUSTOMER.city;

xvi. How many different cities are there in the customer table. 
SELECT COUNT(DISTINCT(city)) FROM CUSTOMER; 

xvii. How many warehouses are there in Colombo?. 
SELECT COUNT(*) FROM WAREHOUSE WHERE city='Colombo';

xviii. How do you check all order dates are less than or equal to shipping dates? 
SELECT SHIPMENT.ship_date,ORDE.odate from SHIPMENT INNER JOIN ORDE on ORDE.orderno = SHIPMENT.orderno WHERE ship_date>=odate;

xix. List all the order number, order date, customer number and order amount where all the shipment made from Colombo warehouses. 
SELECT ORDE.orderno,ORDE.odate,ORDE.custno,ORDE.ord_amt FROM ((ORDE INNER JOIN SHIPMENT on SHIPMENT.orderno=ORDE.orderno)
INNER JOIN WAREHOUSE ON SHIPMENT.warehouseno =WAREHOUSE.warehouseno) WHERE WAREHOUSE.city='Colombo';

xx. List all the customer names, number of orders and average order amount where the middle column is the total numbers of 
orders by the customer and the last column is the average order amount for that customer. 
SELECT cname,COUNT(*) AS number_of_oders,avg(ord_amt) AS average_ord_amt FROM CUSTOMER C JOIN ORDE O on C.custno = O.custno;

xxi. Demonstrate how you can update the unit price for itemno 22 to the table ITEM.
UPDATE orde_item SET qty=52 WHERE itemno=22;  

xxii. Clone the table ORDE and name the colon table as NEWORDE.
CREATE TABLE NEWORDE AS SELECT *FROM ORDE; 

xxiii. Drop the table ORDE and create a new table as follows.
DROP TABLE ORDE;

xxiv. Create a table called ORDER with the same field in the table NEWORDE. Explain the problem you may encountered and how can overcome it.
ORDER is a key word.Then, we can't use this 'ORDER` word to create table.
But we can use backtick for this ORDER word and we can create a ORDER table.
	  
CREATE TABLE `ORDER`(orderno INT, odate DATE, custno INT, ord_amt INT);
	  
xxv. Backup your database as orderproc_db.sql into the main folder. 


//2018

Create a text file using notepad++ to save the answers for the following questions. Set the name of this file as "dbanswers.txt".

i. Using MySQL, create a database called covid_patients_db for the above purpose.
ii. Using the covid patients db database, create the following tables, use the below
schema with suitable MySQL data types.

PATIENT (pid, pname, hid, symptoms, address, sex, date of birth, remarks) DOCTOR (did, drame, hid, speciality)

VACCINE (vname, pid, first dose_date, second dose_date, third_dose_date)

HOSPITAL (hid, hname, district, province, tpno)

iii. Identify the primary keys for the tables and define the necessary primary key constrains.
iv. Identify the foreign keys and enforce referential integrity where necessary.
v. Insert the records to the tables. Records are available as text files with the respective 
table names in a folder called "Tables" on your desktop. You need to properly format these records before inserting into the tables. Use the tables given for this purpose.
(b)

i. Carefully read the error in the following and explain why this is occurred. How can
you rectify this? INSERT INTO PATIENT VALUES ('COJF0002', 'Krishanth','JFTH', 'Mild Cough", "No 12
Main Street Nallur, Jaffna', 'M', '2022-05-05','All three doses vaccinated");
ERROR 1406 (22001): Data too long for column 'remarks' at row 1
If you have this error correct it and insert the record again.

ii. When entering the patient details a Nurse made a mistake. Exploring the patient table 
carefully and you can observe that in the symptom column the first record is entered with a 
spelling mistake. That is "Caugh" should be "Cough". How can you correct this without deleting and inserting this record again?

iii. Explain why and error can occur when trying the following in MySQL console?
INSERT INTO PATIENT VALUES ('CONI0001', 'Rasool', 'No Severe Fever and Cough', 'No 05, 
Mundal Puttalam', 'M','12-06-2021','One dose vaccinated'); How can you rectify this? 
correct it and insert the record again.

iv. List all patients who have vaccinated all three doses.

(c)

i. List all provinces of the hospitals where more Virologist are available 
ii. List all hospitals where a smaller number of patients are admitted.
iii. List all districts where more severe cases are admitted.
iv. With suitable query to deduce the relationship of vaccination and the case severity.
State all assumptions you have made.
v. Back up your database and set the name of the backup as coviddb.sql

//answers
Q1
a) 
1) 
CREATE DATABASE covid_patients_db;

2) 
CREATE TABLE PATIENT (pid VARCHAR(15), pname VARCHAR(15), hid VARCHAR(10), symptoms VARCHAR(35), address VARCHAR(60), sex VARCHAR(2), date_of_birth DATE, remarks VARCHAR(60));
CREATE TABLE DOCTOR (did VARCHAR(15), dname VARCHAR(15), hid VARCHAR(10), speciality VARCHAR(20));
CREATE TABLE VACCINE (vname VARCHAR(15), pid VARCHAR(15), first_dose_date DATE, second_dose_date DATE, third_dose_date DATE);
CREATE TABLE HOSPITAL (hid VARCHAR(10), hname VARCHAR(30), district VARCHAR(15), province VARCHAR(15), tpno VARCHAR(10));

3) 
ALTER TABLE PATIENT ADD PRIMARY KEY(pid);
ALTER TABLE VACCINE ADD PRIMARY KEY(vname,pid);

4)
ALTER TABLE  DOCTOR ADD FOREIGN KEY(hid) REFERENCES PATIENT(hid);

5)
LOAD DATA LOCAL INFILE "D:/ass/ass7 (real4)/table/PATIENT.txt" INTO TABLE PATIENT;
b)
1)
Because in remarks column we need to put more column size, then we can enter the values. 

2)
UPDATE PATIENT SET symptoms = 'Mild Caugh' WHERE symptoms = 'Mild Cough';
UPDATE PATIENT SET symptoms = 'Severe Caugh' WHERE symptoms = 'Severe Cough';

3)
Because date type is incorrect. '12-06-2021' want to replace '2021-06-12' like this.

INSERT INTO PATIENT VALUES ('CONI0001','Rasool' ,'NIID', 'Severe Fever and Cough',
'No 05, Mundal Puttalam','M','2021-06-12','One dose vaccinated');

4)
SELECT *FROM PATIENT WHERE  remarks="All three doses vaccinated";

c)
1)
SELECT DISTINCT h.province FROM hospital h JOIN doctor d WHERE (d.speciality = 'Virologist') AND (d.hid = h.hid);
2)
SELECT * FROM hospital WHERE hid = (SELECT hid FROM patient GROUP BY hid ORDER BY COUNT(*) LIMIT 1);
3)
SELECT * FROM hospital WHERE hid = (SELECT hid FROM patient WHERE symptoms LIKE '%Severe%' GROUP BY hid ORDER BY COUNT(*) DESC LIMIT 1);
4)
SELECT symptoms,remarks FROM patient GROUP BY remarks;
         Assumption -> One dose vaccinated -> Severe Fever and Cough
         Assumption -> Two dose vaccinated -> Severe Fever and Cough
         Assumption -> All doses vaccinated -> Mild Cough



=======================Joining====================================

SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
FROM Orders
INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;


SELECT Orders.OrderID, Customers.CustomerName
FROM Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;


SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;


SELECT Orders.OrderID, Employees.LastName, Employees.FirstName
FROM Orders
RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
ORDER BY Orders.OrderID;


SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID
ORDER BY Customers.CustomerName;


SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City
FROM Customers A, Customers B
WHERE A.CustomerID <> B.CustomerID
AND A.City = B.City
ORDER BY A.City;


SELECT City FROM Customers
UNION
SELECT City FROM Suppliers
ORDER BY City;
