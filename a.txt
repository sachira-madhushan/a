[19:45, 15/06/2023] Shehara Trinco Cs: abstract class shape
{
	public shape(double base);
	this.base = base;
	abstract String toString();
	public double getArea();
	System.err.println("Shape unknown! Cannot compute area!");
    return 0;
}
abstract class twoD extends shape
{
	 abstract double getArea();
	 abstract double getCircumference();
}
class triangle extends twoD
{
	double base,height,side1,side2,side3;
	this.base = base;
	this.height = height;
	this.side1 = side1;
	this.side2 = side2;
	this.side3 = side3;
	System.out.println("Area: " + ((base1*height1)/2));
	System.out.println("Circumference = " (side1+side2+side3));
}
class rectangle extends twoD
{
	double height,width;
	System.out.println("Area: " + (height*width));
	System.out.println("Circumference = " + (2*(height+width)));
}
class circle extends twoD
{
	double radius;
	System.out.println("Area: " + (pi*radius*radius));
	System.out.println("Circumference = " + (2*pi*radius));
}
abstract class threeD extends shape
{
	double getSurface();
	double getVolume();
}
abstract class box extends threeD
{
	double height,width,length;
	System.out.println("surface = " + (2*(height*width + width*length + length*height)));
	System.out.println("volume = " + height*width*length);
}
abstract class cone extends threeD
{
	double radius,height;
	System.out.println("surface = " + (2*pi*radius(radius+height)));
	System.out.println("volume = " + ((pi*radius*radius*height)/3));
}
abstract class cylinder extends threeD
{
	double radius,height;
	System.out.println("surface = " + (2*pi*radius(radius+height)));
	System.out.println("volume = " + (pi*radius*radius*height));
}
abstract class sphere extends threeD
{
	double radius;
	System.out.println("surface = " + (4*pi*radius*radius));
	System.out.println("volume = " + ((4*pi*radius*radius*radius)/3));
}
class testAbstraction
{
	public static void main(String args[])
	{
		shape s1 = new rectangle(3,5);
		System.out.println(s1);
	}
}
[19:47, 15/06/2023] Shehara Trinco Cs: public class shapes
{
	public shape(double base);
	this.base = base;
	public double getArea();
	System.err.println("Shape unknown! Cannot compute area!");
    return 0;
}
class twoD extends shapes
{
	 double getArea();
	 double getCircumference();
}
class triangle extends twoD
{
	double base,height,side1,side2,side3;
	this.base = base;
	this.height = height;
	this.side1 = side1;
	this.side2 = side2;
	this.side3 = side3;
	System.out.println("Area: " + ((base1*height1)/2));
	System.out.println("Circumference = " (side1+side2+side3));
}
class rectangle extends twoD
{
	double height,width;
	System.out.println("Area: " + (height*width));
	System.out.println("Circumference = " + (2*(height+width)));
}
class circle extends twoD
{
	double radius;
	double pi = 3.14159;
	System.out.println("Area: " + (pi*radius*radius));
	System.out.println("Circumference = " + (2*pi*radius));
}
class threeD extends shapes
{
	double getSurface();
	double getVolume();
}
class box extends threeD
{
	double height,width,length;
	System.out.println("surface = " + (2*(height*width + width*length + length*height)));
	System.out.println("volume = " + height*width*length);
}
class cone extends threeD
{
	double radius,height;
	double pi = 3.14159;
	System.out.println("surface = " + (2*pi*radius(radius+height)));
	System.out.println("volume = " + ((pi*radius*radius*height)/3));
}
class cylinder extends threeD
{
	double radius,height;
	double pi = 3.14159;
	System.out.println("surface = " + (2*pi*radius(radius+height)));
	System.out.println("volume = " + (pi*radius*radius*height));
}
class sphere extends threeD
{
	double radius;
	double pi = 3.14159;
	System.out.println("surface = " + (4*pi*radius*radius));
	System.out.println("volume = " + ((4*pi*radius*radius*radius)/3));
}
public static void main(String args[])
{
	shape s1 = new rectangle(3,5);
	System.out.println(s1);
}

................................................................................

// Publication class with title and price
class Publication {
  String title;
  double price;
  
  public void getData() {
    // Get input for title and price
  }
  
  public void print() {
    System.out.println("Title: " + title);
    System.out.println("Price: " + price);
  }
}

// Book interface with accession number
interface Book {
  int accessionNumber = 540; // default value
  
  default void print() {
    System.out.println("Accession number: " + accessionNumber);
  }
}

// Magazine interface with volume number
interface Magazine {
  int volumeNumber = 5; // default value
  
  default void print() {
    System.out.println("Volume number: " + volumeNumber);
  }
}

// Journal class that implements Book and Magazine
class Journal extends Publication implements Book, Magazine {
  int accessionNumber;
  int volumeNumber;
  
  public void getData() {
    super.getData(); // Get title and price from Publication
    // Get input for accession number and volume number
  }
  
  public void print() {
    super.print(); // Print title and price from Publication
    Book.super.print(); // Print accession number from Book
    Magazine.super.print(); // Print volume number from Magazine
    System.out.println(); // Print empty line for spacing
  }
}

// Example usage in main method
public class multi
{
public static void main(String[] args) {
  Journal journal = new Journal();
  journal.getData();
  journal.print();
}
}


.......................................................................


import java.util.Arrays;

class Main {
    
    static class Object {
        int val;
        int index;
    }
    
    static int[] twoSum(int[] nums, int target) {
        int numsSize = nums.length;
        Object[] objects = new Object[numsSize];
        
        for (int i = 0; i < numsSize; i++) {
            Object obj = new Object();
            obj.val = nums[i];
            obj.index = i;
            objects[i] = obj;
        }
        
        Arrays.sort(objects, (a, b) -> a.val - b.val);
        
        int[] results = new int[2];
        int i = 0;
        int j = numsSize - 1;
        
        while (i < j) {
            int diff = target - objects[i].val;
            if (diff > objects[j].val) {
                while (++i < j && objects[i].val == objects[i - 1].val) {}
            } else if (diff < objects[j].val) {
                while (--j > i && objects[j].val == objects[j + 1].val) {}
            } else {
                results[0] = objects[i].index;
                results[1] = objects[j].index;
                return results;
            }
        }
        
        return null;
    }
    
    public static void main(String[] args) {
        int[] nums = { 4, 2, 1, 5 };
        int ctr = nums.length;
        int target = 7;
        
        System.out.print("Original Array: ");
        for (int i = 0; i < ctr; i++) {
            System.out.print(nums[i] + " ");
        }
        
        System.out.println("\nTarget Value: " + target);
        
        int[] indexes = twoSum(nums, target);
        
        if (indexes != null) {
            System.out.println("Indices of the two numbers whose sum equal to target value: " + target);
            System.out.println(indexes[0] + " " + indexes[1]);
        } else {
            System.out.println("Not found or matched");
        }
    }
}


...........................................................................................................

public class Prime {
    public static void main(String[] args) {
        System.out.println(isPrime(17) ? "true" : "false");
    }

    public static boolean isPrime(int number) {
        if (number <= 1) {
            return false;
        }

        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                return false;
            }
        }

        return true;
    }
}


.............................................................................................................

public class Main {
    public static void main(String[] args) {
        int[] array = { 4, 2, 1, 5 };
        int target = 7;

        for (int i = 0; i < array.length; i++) {
            int difference = target - array[i];

            for (int j = i; j < array.length; j++) {
                if (array[j] == difference) {
                    System.out.println(i + ", " + j);
                    break;
                }
            }
        }
    }
}


..................................................................................................................

// Publication class
class Publication {
    protected String title;
    protected double price;

    public void getData(String title, double price) {
        this.title = title;
        this.price = price;
    }

    public void print() {
        System.out.println("Title: " + title);
        System.out.println("Price: $" + price);
    }
}

// Book interface
interface Book {
    int accessionNumber = 0;

    default void getData(String title, double price, int accessionNumber) {
        Publication.super.getData(title, price);
        this.accessionNumber = accessionNumber;
    }

    default void print() {
        Publication.super.print();
        System.out.println("Accession Number: " + accessionNumber);
    }
}

// Magazine interface
interface Magazine {
    int volumeNumber = 0;

    default void getData(String title, double price, int volumeNumber) {
        Publication.super.getData(title, price);
        this.volumeNumber = volumeNumber;
    }

    default void print() {
        Publication.super.print();
        System.out.println("Volume Number: " + volumeNumber);
    }
}

// Journal class
class Journal {
    private String name;

    public void print() {
        System.out.println("Journal Name: " + name);
    }
}

public class Main {
    public static void main(String[] args) {
        Journal[] journals = new Journal[5];

        for (int i = 0; i < 5; i++) {
            journals[i] = new Journal();
            journals[i].print();
        }
    }
}
