// open system call
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <unistd.h>
  
extern int errno;
  
int main()
{
    // if file does not have in directory
    // then file foo.txt is created.
    int fd = open("foo.txt", O_RDONLY | O_CREAT);
  
    printf("fd = %d\n", fd);
  
    if (fd == -1) {
        // print which type of error have in a code
        printf("Error Number % d\n", errno);
  
        // print program detail "Success or failure"
        perror("Program");
    }
    return 0;
}

-----------------------------------------------------------------------------

//exec system call

#include <stdio.h>
#include <unistd.h>

int main() {
    execl("/bin/ls", "ls", "-l", NULL);
    printf("This line will not be executed if exec succeeds.\n");

    return 0;
}


-------------------------------------------------------------------------------

// wait system call

#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

int main() {
    pid_t pid = fork();

    if (pid == 0) {
        printf("Child process\n");
    } else if (pid > 0) {
        wait(NULL);
        printf("Parent process\n");
    } else {
        printf("Fork failed\n");
    }

    return 0;
}

--------------------------------------------------------------------------------

//exit system call

#include <stdio.h>
#include <stdlib.h>

int main() {
    printf("Before exit\n");
    exit(0);
    printf("This line will not be executed.\n");

    return 0;
}


---------------------------------------------------------------------------------

//open system call

#include <stdio.h>
#include <fcntl.h>

int main() {
    int file = open("file.txt", O_RDONLY);

    if (file == -1) {
        printf("Failed to open the file.\n");
    } else {
        printf("File opened successfully.\n");
        // Perform operations on the file
        close(file);
    }

    return 0;
}

------------------------------------------------------------------------------

//close system call

#include <stdio.h>
#include <fcntl.h>

int main() {
    int file = open("file.txt", O_RDONLY);

    if (file == -1) {
        printf("Failed to open the file.\n");
    } else {
        printf("File opened successfully.\n");
        // Perform operations on the file
        close(file);
        printf("File closed.\n");
    }

    return 0;
}

--------------------------------------------------------------------------------

//read system call

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

#define BUFFER_SIZE 1024

int main() {
    int file = open("file.txt", O_RDONLY);

    if (file == -1) {
        printf("Failed to open the file.\n");
    } else {
        char buffer[BUFFER_SIZE];
        ssize_t bytesRead = read(file, buffer, BUFFER_SIZE - 1);

        if (bytesRead == -1) {
            printf("Error while reading the file.\n");
        } else {
            buffer[bytesRead] = '\0';
            printf("Read %zd bytes: %s\n", bytesRead, buffer);
        }

        close(file);
    }

    return 0;
}

-------------------------------------------------------------------------------

// write system call

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int file = open("file.txt", O_WRONLY | O_CREAT, 0644);

    if (file == -1) {
        printf("Failed to open the file.\n");
    } else {
        const char *message = "Hello, world!";
        ssize_t bytesWritten = write(file, message, strlen(message));

        if (bytesWritten == -1) {
            printf("Error while writing to the file.\n");
        } else {
            printf("Written %zd bytes.\n", bytesWritten);
        }

        close(file);
    }

    return 0;
}

-----------------------------------------------------------------------------


First come first serve algorithm

import java.util.*;

public class FCFS {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get the number of processes from the user
        System.out.print("Enter the number of processes: ");
        int numProcesses = scanner.nextInt();

        // Create arrays to store burst time, turnaround time, and waiting time
        int[] burstTime = new int[numProcesses];
        int[] turnaroundTime = new int[numProcesses];
        int[] waitingTime = new int[numProcesses];

        // Get the burst time for each process from the user
        for (int i = 0; i < numProcesses; i++) {
            System.out.print("Enter the burst time for process " + (i + 1) + ": ");
            burstTime[i] = scanner.nextInt();
        }

        // Calculate the turnaround time and waiting time
        waitingTime[0] = 0;  // Waiting time for the first process is always 0
        turnaroundTime[0] = burstTime[0];

        for (int i = 1; i < numProcesses; i++) {
            waitingTime[i] = waitingTime[i - 1] + burstTime[i - 1];
            turnaroundTime[i] = waitingTime[i] + burstTime[i];
        }

        // Output the turnaround time and waiting time table
        System.out.println("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time");
        for (int i = 0; i < numProcesses; i++) {
            System.out.printf("%d\t%d\t\t%d\t\t%d\n", (i + 1), burstTime[i], waitingTime[i], turnaroundTime[i]);
        }

        scanner.close();
    }
}

-------------------------------------------------------------------------------------------------------------------

Shorted job first

import java.util.*;

class Process {
    int processId;
    int arrivalTime;
    int burstTime;
    
    public Process(int processId, int arrivalTime, int burstTime) {
        this.processId = processId;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
    }
}

public class SJF {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get the number of processes from the user
        System.out.print("Enter the number of processes: ");
        int numProcesses = scanner.nextInt();

        // Create arrays to store burst time, turnaround time, and waiting time
        int[] burstTime = new int[numProcesses];
        int[] turnaroundTime = new int[numProcesses];
        int[] waitingTime = new int[numProcesses];

        // Get the burst time for each process from the user
        for (int i = 0; i < numProcesses; i++) {
            System.out.print("Enter the burst time for process " + (i + 1) + ": ");
            burstTime[i] = scanner.nextInt();
        }

        // Sort the processes based on burst time (shortest job first)
        for (int i = 0; i < numProcesses - 1; i++) {
            for (int j = 0; j < numProcesses - i - 1; j++) {
                if (burstTime[j] > burstTime[j + 1]) {
                    // Swap burst time
                    int tempBurstTime = burstTime[j];
                    burstTime[j] = burstTime[j + 1];
                    burstTime[j + 1] = tempBurstTime;
                    
                    // Swap process IDs
                    int tempProcessId = j + 1;
                    j++;
                    int tempProcessId2 = j + 1;
                    j--;
                    int tempProcessId3 = tempProcessId;
                    tempProcessId = tempProcessId2;
                    tempProcessId2 = tempProcessId3;
                }
            }
        }

        // Calculate the turnaround time and waiting time
        waitingTime[0] = 0;  // Waiting time for the first process is always 0
        turnaroundTime[0] = burstTime[0];

        for (int i = 1; i < numProcesses; i++) {
            waitingTime[i] = waitingTime[i - 1] + burstTime[i - 1];
            turnaroundTime[i] = waitingTime[i] + burstTime[i];
        }

        // Output the turnaround time and waiting time table
        System.out.println("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time");
        for (int i = 0; i < numProcesses; i++) {
            System.out.printf("%d\t%d\t\t%d\t\t%d\n", (i + 1), burstTime[i], waitingTime[i], turnaroundTime[i]);
        }

        scanner.close();
    }
}


------------------------------------------------------------------------------------------------------------------

Priority sheduling

import java.util.*;

class Process {
    int processId;
    int arrivalTime;
    int burstTime;
    int priority;
    
    public Process(int processId, int arrivalTime, int burstTime, int priority) {
        this.processId = processId;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.priority = priority;
    }
}

public class PriorityScheduling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get the number of processes from the user
        System.out.print("Enter the number of processes: ");
        int numProcesses = scanner.nextInt();

        // Create arrays to store burst time, priority, turnaround time, and waiting time
        int[] burstTime = new int[numProcesses];
        int[] priority = new int[numProcesses];
        int[] turnaroundTime = new int[numProcesses];
        int[] waitingTime = new int[numProcesses];

        // Get the burst time and priority for each process from the user
        for (int i = 0; i < numProcesses; i++) {
            System.out.print("Enter the burst time for process " + (i + 1) + ": ");
            burstTime[i] = scanner.nextInt();
            System.out.print("Enter the priority for process " + (i + 1) + ": ");
            priority[i] = scanner.nextInt();
        }

        // Sort the processes based on priority (higher priority first)
        for (int i = 0; i < numProcesses - 1; i++) {
            for (int j = 0; j < numProcesses - i - 1; j++) {
                if (priority[j] < priority[j + 1]) {
                    // Swap burst time
                    int tempBurstTime = burstTime[j];
                    burstTime[j] = burstTime[j + 1];
                    burstTime[j + 1] = tempBurstTime;

                    // Swap priority
                    int tempPriority = priority[j];
                    priority[j] = priority[j + 1];
                    priority[j + 1] = tempPriority;
                    
                    // Swap process IDs
                    int tempProcessId = j + 1;
                    j++;
                    int tempProcessId2 = j + 1;
                    j--;
                    int tempProcessId3 = tempProcessId;
                    tempProcessId = tempProcessId2;
                    tempProcessId2 = tempProcessId3;
                }
            }
        }

        // Calculate the turnaround time and waiting time
        waitingTime[0] = 0;  // Waiting time for the first process is always 0
        turnaroundTime[0] = burstTime[0];

        for (int i = 1; i < numProcesses; i++) {
            waitingTime[i] = waitingTime[i - 1] + burstTime[i - 1];
            turnaroundTime[i] = waitingTime[i] + burstTime[i];
        }

        // Output the turnaround time and waiting time table
        System.out.println("\nProcess\tBurst Time\tPriority\tWaiting Time\tTurnaround Time");
        for (int i = 0; i < numProcesses; i++) {
            System.out.printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", (i + 1), burstTime[i], priority[i], waitingTime[i], turnaroundTime[i]);
        }

        scanner.close();
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------


Round robin algorithm

import java.util.*;

public class RoundRobin {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get the number of processes from the user
        System.out.print("Enter the number of processes: ");
        int numProcesses = scanner.nextInt();

        // Get the time quantum from the user
        System.out.print("Enter the time quantum: ");
        int timeQuantum = scanner.nextInt();

        // Create arrays to store arrival time, burst time, waiting time, and turnaround time
        int[] arrivalTime = new int[numProcesses];
        int[] burstTime = new int[numProcesses];
        int[] waitingTime = new int[numProcesses];
        int[] turnaroundTime = new int[numProcesses];

        // Get the arrival time and burst time for each process from the user
        for (int i = 0; i < numProcesses; i++) {
            System.out.print("Enter the arrival time for process " + (i + 1) + ": ");
            arrivalTime[i] = scanner.nextInt();
            System.out.print("Enter the burst time for process " + (i + 1) + ": ");
            burstTime[i] = scanner.nextInt();
        }

        // Calculate the waiting time and turnaround time
        int[] remainingTime = new int[numProcesses];
        System.arraycopy(burstTime, 0, remainingTime, 0, numProcesses);
        int currentTime = 0;

        while (true) {
            boolean allProcessesCompleted = true;

            for (int i = 0; i < numProcesses; i++) {
                if (remainingTime[i] > 0) {
                    allProcessesCompleted = false;

                    if (remainingTime[i] > timeQuantum) {
                        currentTime += timeQuantum;
                        remainingTime[i] -= timeQuantum;
                    } else {
                        currentTime += remainingTime[i];
                        waitingTime[i] = currentTime - burstTime[i] - arrivalTime[i];
                        remainingTime[i] = 0;
                    }
                }
            }

            if (allProcessesCompleted) {
                break;
            }
        }

        // Calculate the turnaround time
        for (int i = 0; i < numProcesses; i++) {
            turnaroundTime[i] = burstTime[i] + waitingTime[i];
        }

        // Output the turnaround time and waiting time table
        System.out.println("\nProcess\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time");
        for (int i = 0; i < numProcesses; i++) {
            System.out.printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", (i + 1), arrivalTime[i], burstTime[i], waitingTime[i], turnaroundTime[i]);
        }

        scanner.close();
    }
}


-------------------------------------------------------------------------------------------------------------------------------------------


    1  ls
    2  cd iroshan
    3  cd ..
    4  mkdir darshana
    5  ls
    6  ls -a
    7  ls -l
    8  pwd
    9  ls
   10  touch myfile.html
   11  ls
   12  touch myfile1.txt
   13  ls
   14  rm name
   15  ls
   16  rmdir iroshan
   17  ls
   18  cd darshana
   19  ls
   20  touch myfile1.txt
   21  ls
   22  cd ..
   23  rmdir darshana
   24  rmdir -r darshana
   25  rmdir -p darshana
   26  man rmdir
   27  rmdir -p darshana
   28  rmdir -r darshana
   29  rm -r darshana
   30  ls
   31  echo "Sachira Madhushan" > myfile
   32  ls
   33  cat myfile
   34  head myfile
   35  head -n 5 myfile
   36  man head
   37  head -c 5 myfile
   38  nano myfile
   39  man cd
   40  man mkdir
   41  mkdir --help
   42  help
   43  yelp
   44  man
   45  man man
   46  ls
   47  mkdir vidura
   48  ls
   49  cp myfile vidura
   50  cd vidura
   51  ls
   52  cp ../myfile.html ./
   53  ls
   54  cd ../../
   55  zip -r 19COM307.zip 19COM307
   56  ls
   57  ls -l
   58  cd 19COM307
   59  ls
   60  cd ..
   61  cd 19COM307/vidura
   62  cd ..
   63  ls
   64  mv myfile iroshan
   65  ls
   66  mv iroshan vidura
   67  ls
   68  cd vidura
   69  ls
   70  ls -l
   71  chmod 777 iroshan
   72  ls -l
   73  chmod 444 iroshan
   74  ls -l
   75  chmod 000 iroshan
   76  chmod 777 iroshan
   77  chmod 644 iroshan
   78  ls -l
   79  chmod u+rwx iroshan
   80  ls -l
   81  chmod ugo+rwx iroshan
   82  ls -l
   83  chmod g-rwx iroshan
   84  ls -l
   85  clear
   86  sudo adduser iroshan
   87  sudo userdel iroshan
   88  wget -O file.txt https://shorturl.at/joMY7
   89  history
   90  clear
   91  history -c




------------------------------------------------------------------------------------------------------------------------------
First come first serve

import java.util.Scanner;  

public class FirstComeFirstServe {
  public static void main(String[] args) {
    
    Scanner myScanner = new Scanner(System.in); 

    int noP; 

    System.out.print("Enter Number of Process : ");
    noP = myScanner.nextInt();

    String [] PIT = new String[noP];
    int [] BT = new int[noP];
    int [] CT = new int[noP];
    int [] TAT = new int[noP];
    int [] WT = new int[noP];

    for(int i=0;i<noP;i++){
        System.out.print("Enter Process " + (i+1) + " Process ID : ");
        PIT[i] = myScanner.next();
        System.out.print("Enter " + PIT[i] + " BT : ");
        BT[i] = myScanner.nextInt();
    }

    myScanner.close();

    int sum = 0;
    float avgSum = 0;

    System.out.println("\nPID\tBT\tCt\tTAT\tWT");

    for(int i=0;i<noP;i++){
        CT[i] = BT[i] + sum;
        TAT[i] = CT[i];
        WT[i] = TAT[i] - BT[i];
        avgSum += WT[i];
        System.out.println(PIT[i] + "\t" + BT[i] + "\t" + CT[i] + "\t" + TAT[i] + "\t" + WT[i]);
        sum += BT[i];
    }

    System.out.println("\nAvarage waiting time : " + avgSum/noP);

  }
}

-------------------------------------------------------------------------------------------------------------------

SFJ

import java.util.Scanner;  

public class ShortestJobFirst {
  public static void main(String[] args) {

    Scanner myScanner = new Scanner(System.in); 

    int noP;
    System.out.print("Enter Number of Process : ");
    noP = myScanner.nextInt();

    String [] PIT = new String[noP];
    int [] BT = new int[noP];
    int [] CT = new int[noP];
    int [] TAT = new int[noP];
    int [] WT = new int[noP];

    for(int i=0;i<noP;i++){
        System.out.print("Enter Process " + (i+1) + " Process ID : ");
        PIT[i] = myScanner.next();
        System.out.print("Enter " + PIT[i] + " BT : ");
        BT[i] = myScanner.nextInt();
    }

    myScanner.close();

    String pit_temp = " ";
    int bt_temp = 0;  

    for(int i=0; i < noP; i++){  
            for(int j=1; j < (noP-i); j++){  
                     if(BT[j-1] > BT[j]){  
                            pit_temp = PIT[j-1];
                            bt_temp = BT[j-1];  
                            PIT[j-1] = PIT[j];
                            BT[j-1] = BT[j]; 
                            PIT[j] = pit_temp;
                            BT[j] = bt_temp;  
                    }    
            }  
    }  

    int sum = 0;
    float avgSum = 0;

    System.out.println("\nPID\tBT\tCt\tTAT\tWT");

    for(int i=0;i<noP;i++){
        CT[i] = BT[i] + sum;
        TAT[i] = CT[i];
        WT[i] = TAT[i] - BT[i];
        avgSum += WT[i];
        System.out.println(PIT[i] + "\t" + BT[i] + "\t" + CT[i] + "\t" + TAT[i] + "\t" + WT[i]);
        sum += BT[i];
    }

    System.out.println("\nAvarage waiting time : " + avgSum/noP);

  }
}


--------------------------------------------------------------------------------------------------------------
priority

import java.util.Scanner;  

public class PriorityScheduling {
  public static void main(String[] args) {

    Scanner myScanner = new Scanner(System.in); 

    int noP;
    System.out.print("Enter Number of Process : ");
    noP = myScanner.nextInt();

    String [] PIT = new String[noP];
    int [] PR = new int[noP];
    int [] BT = new int[noP];
    int [] CT = new int[noP];
    int [] TAT = new int[noP];
    int [] WT = new int[noP];

    for(int i=0;i<noP;i++){
        System.out.print("Enter Process " + (i+1) + " Process ID : ");
        PIT[i] = myScanner.next();
        System.out.print("Enter " + PIT[i] + " BT : ");
        BT[i] = myScanner.nextInt();
        System.out.print("Enter " + PIT[i] + " Priority : ");
        PR[i] = myScanner.nextInt();
    }

    myScanner.close();

    String pit_temp = " ";
    int bt_temp = 0, pr_temp = 0;  

    for(int i=0; i < noP; i++){  
            for(int j=1; j < (noP-i); j++){  
                     if(PR[j-1] > PR[j]){  
                            pit_temp = PIT[j-1];
                            bt_temp = BT[j-1]; 
                            pr_temp = PR[j-1]; 
                            PIT[j-1] = PIT[j];
                            BT[j-1] = BT[j];
                            PR[j-1] = PR[j];
                            PIT[j] = pit_temp;
                            BT[j] = bt_temp;  
                            PR[j] = pr_temp;
                    }    
            }  
    }  

    int sum = 0;
    float avgSum = 0;

    System.out.println("\nPID\tBT\tPR\tCt\tTAT\tWT");

    for(int i=0;i<noP;i++){
        CT[i] = BT[i] + sum;
        TAT[i] = CT[i];
        WT[i] = TAT[i] - BT[i];
        avgSum += WT[i];
        System.out.println(PIT[i] + "\t" + BT[i] + "\t" + PR[i] + "\t" + CT[i] + "\t" + TAT[i] + "\t" + WT[i]);
        sum += BT[i];
    }

    System.out.println("\nAvarage waiting time : " + avgSum/noP);
    
  }
}

----------------------------------------------------------------------------------------------------------------------


Round robin

import java.util.Scanner;

public class RoundRobinScheduling {
    public static void main(String[] args) {
        Scanner myScanner = new Scanner(System.in);
        
        System.out.print("Enter Number of Process : ");
        int noP = myScanner.nextInt();
        
        String [] PIT = new String[noP];
        int [] BT = new int[noP];
        int [] CT = new int[noP];
        int [] TAT = new int[noP];
        int [] WT = new int[noP];
        int [] RT = new int[noP]; //remaining Time
        
        for (int i = 0; i < noP; i++) {
            System.out.print("Enter Process " + (i+1) + " Process ID : ");
            PIT[i] = myScanner.next();
            System.out.print("Enter " + PIT[i] + " BT : ");
            BT[i] = myScanner.nextInt();
            RT[i] = BT[i];
        }
        
        System.out.print("Enter the Time Quantum: ");
        int timeQuantum = myScanner.nextInt();
        
        myScanner.close();

        int time = 0;
        float avgSum = 0;

        while (true) {
            boolean done = true;
            for (int i = 0; i < noP; i++) {
                if (RT[i] > 0) {
                    done = false;
                    if (RT[i] > timeQuantum) {
                        time += timeQuantum;
                        RT[i] -= timeQuantum;
                    } else {
                        time += RT[i];
                        WT[i] = time - BT[i];
                        RT[i] = 0;
                        avgSum += WT[i];
                    }
                }
            }
            if (done == true) break;
        }
        
        for (int i = 0; i < noP; i++) {
            CT[i] = BT[i] + WT[i];
            TAT[i] = CT[i];
        }
        
        System.out.println("\nPID\tBT\tCt\tTAT\tWT");

        for (int i = 0; i < noP; i++) {
            System.out.println(PIT[i] + "\t" + BT[i] + "\t" + CT[i] + "\t" + TAT[i] + "\t" + WT[i]);
        }

        System.out.println("\nAvarage waiting time : " + avgSum/noP);
        
    }
}



------------------------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------

create a c file
	nano basic.c
	type codes
	ctrl+o
	ctrl+x
	
compile
	gcc basic.c -o basic
	
run
	./basic
	
Show what are in file
	cat filename.c	

To print 
#include<stdio.h>
	printf("");
	
	
	
Write function
	
man 2 write
	
#include<unistd.h>
int main(){
	write(1,"Hello world", 11);
}


Read function

man 2 read

#include<unistd.h>
int main(){
	char b[30];
	read(0,b,11);
	write(1,b, 11);
}





Open function

man 2 open

#include<unistd.h>
#include<fcntl.h>
#include<sys/types.h>
#include<sys/stat.h>

int main(){ 
        int n, fd, fd1;
        char b[50];
		
		fd = open("doc/test.txt",O_RDONLY);
        n = read(fd,b,50);
		fd1 = open("target.txt",O_CREAT|O_WRONLY,0642);
        write(fd1,b,10);
}





fork functioon                                     

#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>

int main(){

        fork();
        printf("Hello world\n");

return 0;
}


-----------------------------------------------------------------------------------------------------------------------------------
