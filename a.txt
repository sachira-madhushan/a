// open system call
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <unistd.h>
  
extern int errno;
  
int main()
{
    // if file does not have in directory
    // then file foo.txt is created.
    int fd = open("foo.txt", O_RDONLY | O_CREAT);
  
    printf("fd = %d\n", fd);
  
    if (fd == -1) {
        // print which type of error have in a code
        printf("Error Number % d\n", errno);
  
        // print program detail "Success or failure"
        perror("Program");
    }
    return 0;
}

-----------------------------------------------------------------------------

//exec system call

#include <stdio.h>
#include <unistd.h>

int main() {
    execl("/bin/ls", "ls", "-l", NULL);
    printf("This line will not be executed if exec succeeds.\n");

    return 0;
}


-------------------------------------------------------------------------------

// wait system call

#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

int main() {
    pid_t pid = fork();

    if (pid == 0) {
        printf("Child process\n");
    } else if (pid > 0) {
        wait(NULL);
        printf("Parent process\n");
    } else {
        printf("Fork failed\n");
    }

    return 0;
}

--------------------------------------------------------------------------------

//exit system call

#include <stdio.h>
#include <stdlib.h>

int main() {
    printf("Before exit\n");
    exit(0);
    printf("This line will not be executed.\n");

    return 0;
}


---------------------------------------------------------------------------------

//open system call

#include <stdio.h>
#include <fcntl.h>

int main() {
    int file = open("file.txt", O_RDONLY);

    if (file == -1) {
        printf("Failed to open the file.\n");
    } else {
        printf("File opened successfully.\n");
        // Perform operations on the file
        close(file);
    }

    return 0;
}

------------------------------------------------------------------------------

//close system call

#include <stdio.h>
#include <fcntl.h>

int main() {
    int file = open("file.txt", O_RDONLY);

    if (file == -1) {
        printf("Failed to open the file.\n");
    } else {
        printf("File opened successfully.\n");
        // Perform operations on the file
        close(file);
        printf("File closed.\n");
    }

    return 0;
}

--------------------------------------------------------------------------------

//read system call

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

#define BUFFER_SIZE 1024

int main() {
    int file = open("file.txt", O_RDONLY);

    if (file == -1) {
        printf("Failed to open the file.\n");
    } else {
        char buffer[BUFFER_SIZE];
        ssize_t bytesRead = read(file, buffer, BUFFER_SIZE - 1);

        if (bytesRead == -1) {
            printf("Error while reading the file.\n");
        } else {
            buffer[bytesRead] = '\0';
            printf("Read %zd bytes: %s\n", bytesRead, buffer);
        }

        close(file);
    }

    return 0;
}

-------------------------------------------------------------------------------

// write system call

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int file = open("file.txt", O_WRONLY | O_CREAT, 0644);

    if (file == -1) {
        printf("Failed to open the file.\n");
    } else {
        const char *message = "Hello, world!";
        ssize_t bytesWritten = write(file, message, strlen(message));

        if (bytesWritten == -1) {
            printf("Error while writing to the file.\n");
        } else {
            printf("Written %zd bytes.\n", bytesWritten);
        }

        close(file);
    }

    return 0;
}

-----------------------------------------------------------------------------


First come first serve algorithm

import java.util.*;

public class FCFS {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get the number of processes from the user
        System.out.print("Enter the number of processes: ");
        int numProcesses = scanner.nextInt();

        // Create arrays to store burst time, turnaround time, and waiting time
        int[] burstTime = new int[numProcesses];
        int[] turnaroundTime = new int[numProcesses];
        int[] waitingTime = new int[numProcesses];

        // Get the burst time for each process from the user
        for (int i = 0; i < numProcesses; i++) {
            System.out.print("Enter the burst time for process " + (i + 1) + ": ");
            burstTime[i] = scanner.nextInt();
        }

        // Calculate the turnaround time and waiting time
        waitingTime[0] = 0;  // Waiting time for the first process is always 0
        turnaroundTime[0] = burstTime[0];

        for (int i = 1; i < numProcesses; i++) {
            waitingTime[i] = waitingTime[i - 1] + burstTime[i - 1];
            turnaroundTime[i] = waitingTime[i] + burstTime[i];
        }

        // Output the turnaround time and waiting time table
        System.out.println("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time");
        for (int i = 0; i < numProcesses; i++) {
            System.out.printf("%d\t%d\t\t%d\t\t%d\n", (i + 1), burstTime[i], waitingTime[i], turnaroundTime[i]);
        }

        scanner.close();
    }
}

-------------------------------------------------------------------------------------------------------------------

Shorted job first

import java.util.*;

class Process {
    int processId;
    int arrivalTime;
    int burstTime;
    
    public Process(int processId, int arrivalTime, int burstTime) {
        this.processId = processId;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
    }
}

public class SJF {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get the number of processes from the user
        System.out.print("Enter the number of processes: ");
        int numProcesses = scanner.nextInt();

        // Create arrays to store burst time, turnaround time, and waiting time
        int[] burstTime = new int[numProcesses];
        int[] turnaroundTime = new int[numProcesses];
        int[] waitingTime = new int[numProcesses];

        // Get the burst time for each process from the user
        for (int i = 0; i < numProcesses; i++) {
            System.out.print("Enter the burst time for process " + (i + 1) + ": ");
            burstTime[i] = scanner.nextInt();
        }

        // Sort the processes based on burst time (shortest job first)
        for (int i = 0; i < numProcesses - 1; i++) {
            for (int j = 0; j < numProcesses - i - 1; j++) {
                if (burstTime[j] > burstTime[j + 1]) {
                    // Swap burst time
                    int tempBurstTime = burstTime[j];
                    burstTime[j] = burstTime[j + 1];
                    burstTime[j + 1] = tempBurstTime;
                    
                    // Swap process IDs
                    int tempProcessId = j + 1;
                    j++;
                    int tempProcessId2 = j + 1;
                    j--;
                    int tempProcessId3 = tempProcessId;
                    tempProcessId = tempProcessId2;
                    tempProcessId2 = tempProcessId3;
                }
            }
        }

        // Calculate the turnaround time and waiting time
        waitingTime[0] = 0;  // Waiting time for the first process is always 0
        turnaroundTime[0] = burstTime[0];

        for (int i = 1; i < numProcesses; i++) {
            waitingTime[i] = waitingTime[i - 1] + burstTime[i - 1];
            turnaroundTime[i] = waitingTime[i] + burstTime[i];
        }

        // Output the turnaround time and waiting time table
        System.out.println("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time");
        for (int i = 0; i < numProcesses; i++) {
            System.out.printf("%d\t%d\t\t%d\t\t%d\n", (i + 1), burstTime[i], waitingTime[i], turnaroundTime[i]);
        }

        scanner.close();
    }
}


------------------------------------------------------------------------------------------------------------------

Priority sheduling

import java.util.*;

class Process {
    int processId;
    int arrivalTime;
    int burstTime;
    int priority;
    
    public Process(int processId, int arrivalTime, int burstTime, int priority) {
        this.processId = processId;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.priority = priority;
    }
}

public class PriorityScheduling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get the number of processes from the user
        System.out.print("Enter the number of processes: ");
        int numProcesses = scanner.nextInt();

        // Create arrays to store burst time, priority, turnaround time, and waiting time
        int[] burstTime = new int[numProcesses];
        int[] priority = new int[numProcesses];
        int[] turnaroundTime = new int[numProcesses];
        int[] waitingTime = new int[numProcesses];

        // Get the burst time and priority for each process from the user
        for (int i = 0; i < numProcesses; i++) {
            System.out.print("Enter the burst time for process " + (i + 1) + ": ");
            burstTime[i] = scanner.nextInt();
            System.out.print("Enter the priority for process " + (i + 1) + ": ");
            priority[i] = scanner.nextInt();
        }

        // Sort the processes based on priority (higher priority first)
        for (int i = 0; i < numProcesses - 1; i++) {
            for (int j = 0; j < numProcesses - i - 1; j++) {
                if (priority[j] < priority[j + 1]) {
                    // Swap burst time
                    int tempBurstTime = burstTime[j];
                    burstTime[j] = burstTime[j + 1];
                    burstTime[j + 1] = tempBurstTime;

                    // Swap priority
                    int tempPriority = priority[j];
                    priority[j] = priority[j + 1];
                    priority[j + 1] = tempPriority;
                    
                    // Swap process IDs
                    int tempProcessId = j + 1;
                    j++;
                    int tempProcessId2 = j + 1;
                    j--;
                    int tempProcessId3 = tempProcessId;
                    tempProcessId = tempProcessId2;
                    tempProcessId2 = tempProcessId3;
                }
            }
        }

        // Calculate the turnaround time and waiting time
        waitingTime[0] = 0;  // Waiting time for the first process is always 0
        turnaroundTime[0] = burstTime[0];

        for (int i = 1; i < numProcesses; i++) {
            waitingTime[i] = waitingTime[i - 1] + burstTime[i - 1];
            turnaroundTime[i] = waitingTime[i] + burstTime[i];
        }

        // Output the turnaround time and waiting time table
        System.out.println("\nProcess\tBurst Time\tPriority\tWaiting Time\tTurnaround Time");
        for (int i = 0; i < numProcesses; i++) {
            System.out.printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", (i + 1), burstTime[i], priority[i], waitingTime[i], turnaroundTime[i]);
        }

        scanner.close();
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------


Round robin algorithm

import java.util.*;

public class RoundRobin {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get the number of processes from the user
        System.out.print("Enter the number of processes: ");
        int numProcesses = scanner.nextInt();

        // Get the time quantum from the user
        System.out.print("Enter the time quantum: ");
        int timeQuantum = scanner.nextInt();

        // Create arrays to store arrival time, burst time, waiting time, and turnaround time
        int[] arrivalTime = new int[numProcesses];
        int[] burstTime = new int[numProcesses];
        int[] waitingTime = new int[numProcesses];
        int[] turnaroundTime = new int[numProcesses];

        // Get the arrival time and burst time for each process from the user
        for (int i = 0; i < numProcesses; i++) {
            System.out.print("Enter the arrival time for process " + (i + 1) + ": ");
            arrivalTime[i] = scanner.nextInt();
            System.out.print("Enter the burst time for process " + (i + 1) + ": ");
            burstTime[i] = scanner.nextInt();
        }

        // Calculate the waiting time and turnaround time
        int[] remainingTime = new int[numProcesses];
        System.arraycopy(burstTime, 0, remainingTime, 0, numProcesses);
        int currentTime = 0;

        while (true) {
            boolean allProcessesCompleted = true;

            for (int i = 0; i < numProcesses; i++) {
                if (remainingTime[i] > 0) {
                    allProcessesCompleted = false;

                    if (remainingTime[i] > timeQuantum) {
                        currentTime += timeQuantum;
                        remainingTime[i] -= timeQuantum;
                    } else {
                        currentTime += remainingTime[i];
                        waitingTime[i] = currentTime - burstTime[i] - arrivalTime[i];
                        remainingTime[i] = 0;
                    }
                }
            }

            if (allProcessesCompleted) {
                break;
            }
        }

        // Calculate the turnaround time
        for (int i = 0; i < numProcesses; i++) {
            turnaroundTime[i] = burstTime[i] + waitingTime[i];
        }

        // Output the turnaround time and waiting time table
        System.out.println("\nProcess\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time");
        for (int i = 0; i < numProcesses; i++) {
            System.out.printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", (i + 1), arrivalTime[i], burstTime[i], waitingTime[i], turnaroundTime[i]);
        }

        scanner.close();
    }
}


-------------------------------------------------------------------------------------------------------------------------------------------
